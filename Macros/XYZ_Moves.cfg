#        .SYNOPSIS
#        A set of macros which provide buttons to move X, Y or Z to a specific absolute coordinate.
#        Primarily for use in Mainsail as Fluidd already provides this as an option in the UI.

#        .DESCRIPTION
#        There are four Macros in here:
#           - One Macro to Move just [X] to provided coordinate (Default set to 50%)
#           - One Macro to Move just [Y] to provided coordinate (Default set to 50%)
#           - One Macro to Move just [Z] to provided coordinate (Default set to 50mm)
#           - One Macro to Move One or more of X, Y or Z to provided coordinate(s)

#         You can use whichever ones you prefer. Some people may prefer one button per Axis, some may prefer one button with all 3 options in it.
#         I personally use all 4 and have the individual Macros defaults set so I can quickly move the toolhead out of the way or up high for maintenance.

#         The advantage of the individual macros is that they are easier have defaults on - X & Y default is 50%, Z is 50mm.
#         Setting defaults on the XYZ_Macro will make it troublesome to use because if you wanted to move just one axis
#         then you would need to blank the other two axis before entering the third axis.

#        .EXAMPLE
#        Example of moving just 1 axis to 10% with XYZ_Move
#        XYZ_Move POSITION=10%

#        .EXAMPLE
#        Example of moving 2 axis to 10% and 50mm with XYZ_Move
#        XYZ_Move X=10% Y=50

#        .EXAMPLE
#        Example of moving all 3 axis with XYZ_Move
#        XYZ_Move X=100 Y=200 Z=20%

#        .EXAMPLE
#        Example of moving an axis with single buttons
#        X_Move POSITION=50%


#       .CHANGELOG
#       NAME - Date dd/mm/yyyy - Change - Version
#       EwarRoof(Discord: ewarwoowar#3210) - 11/05/2022 - Initial Creation - 1.0.0

#       .TODO
#       - Nothing yet

[gcode_macro X_Move]
description: Moves X to the desired location, either exact coordinate or % of maximum move distance. Primarily used in Mainsail to add a "Move to X position" button, which is available only on Fluidd. More info at: https://github.com/ewarroof/Klipper-Config
gcode:
    ##*~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ##* Macro Parameters/Variables
    ##*~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ## Parameters
    {% set POSITION = params.POSITION|default('50%')|string %}                             ; default position for move. Stored as a string, which will be cast back to int/float later
    
    ## Static Variables (Change for your requirements)
    {% set XY_FEEDRATE = 6000 %}                                                    ; Feedrate for X and Y movements
    {% set Z_FEEDRATE = 1500 %}                                                     ; Feedrate for Z movements

    ##*~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ##* Macro Body
    ##*~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ## Convert Parameter values to raw integer or % of maximum move range
    ## EXPLANATION: If Percentage is provided, it will remove the % sign, check if its a valid Integer and then obtain % of maximum move length.
    ##              Else If Int is provided, it will confirm it's a valid int and then use that value
    ##              Else no move for that Axis
    {% if POSITION.endswith('%') %}
      {% set POSITION = POSITION|replace("%","") %}
      {% if POSITION|int(-1) == -1 %}
        {action_raise_error("X is malformed")}
      {% elif POSITION|int > 100 %}
        {action_raise_error("X is over 100%")}
      {% else %}
        {% set POSITION = (printer.toolhead.axis_maximum.x|float / (100 / POSITION|int))|round %}
      {% endif %}
    {% elif POSITION|int(-1) != -1 %}
      {% set POSITION = POSITION|int %}
    {% else %}
      {% set POSITION = 'nomove'|string %}
    {% endif %}

    ## Throw if X does not have a valid value 
    {% if POSITION == 'nomove'|string  %}
      {action_raise_error("A valid X value has not been provided")}
    {% endif %}
    
    ## Save gcode state (Positioning Mode g90/g91, extrude mode M82/M83, etc)
	SAVE_GCODE_STATE NAME=CURR_STATE

    ## Pre-move and homing commands (Add any pre-move commands here if needed, e.g. QGL, lift Z)
    CG28 ; Conditional G28 Macro
    
    # QGL if not already QGLd (only if QGL section exists in config)
    {% if printer.configfile.settings.quad_gantry_level %}
        {% if printer.quad_gantry_level.applied == False %}
            QUAD_GANTRY_LEVEL
            G28 Z
        {% endif %}
    {% endif %}
    
    ## Move toolhead to location with Absolute move
    G90
    G1 X{POSITION} F{XY_FEEDRATE}
    
    ## Restore gcode state (Positioning Mode g90/g91, extrude mode M82/M83, etc)
	RESTORE_GCODE_STATE NAME=CURR_STATE

[gcode_macro Y_Move]
description: Moves Y to the desired location, either exact coordinate or % of maximum move distance. Primarily used in Mainsail to add a "Move to Y position" button, which is available only on Fluidd. More info at: https://github.com/ewarroof/Klipper-Config
gcode:
    ##*~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ##* Macro Parameters/Variables
    ##*~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ## Parameters
    {% set POSITION = params.POSITION|default('50%')|string %}                             ; default position for move. Stored as a string, which will be cast back to int/float later
    
    ## Static Variables (Change for your requirements)
    {% set XY_FEEDRATE = 6000 %}                                                    ; Feedrate for X and Y movements
    {% set Z_FEEDRATE = 1500 %}                                                     ; Feedrate for Z movements
    
    ## Dynamic Variables
    {% set ABSOLUTE = printer.gcode_move.absolute_coordinates %}                    ; Absolute Movement mode
    
    ##*~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ##* Macro Body
    ##*~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ## Convert Parameter values to raw integer or % of maximum move range
    ## EXPLANATION: If Percentage is provided, it will remove the % sign, check if its a valid Integer and then obtain % of maximum move length.
    ##              Else If Int is provided, it will confirm it's a valid int and then use that value
    ##              Else no move for that Axis
    {% if POSITION.endswith('%') %}
      {% set POSITION = POSITION|replace("%","") %}
      {% if POSITION|int(-1) == -1 %}
        {action_raise_error("Y is malformed")}
      {% elif POSITION|int > 100 %}
        {action_raise_error("Y is over 100%")}
      {% else %}
        {% set POSITION = (printer.toolhead.axis_maximum.y|float / (100 / POSITION|int))|round %}
      {% endif %}
    {% elif POSITION|int(-1) != -1 %}
      {% set POSITION = POSITION|int %}
    {% else %}
      {% set POSITION = 'nomove'|string %}
    {% endif %}

    ## Throw if Y does not have a valid value 
    {% if POSITION == 'nomove'|string  %}
      {action_raise_error("A valid Y value has not been provided")}
    {% endif %}
    
    ## Save gcode state (Positioning Mode g90/g91, extrude mode M82/M83, etc)
	SAVE_GCODE_STATE NAME=CURR_STATE

    ## Pre-move and homing commands (Add any pre-move commands here if needed, e.g. QGL, lift Z)
    CG28 ; Conditional G28 Macro
    
    # QGL if not already QGLd (only if QGL section exists in config)
    {% if printer.configfile.settings.quad_gantry_level %}
        {% if printer.quad_gantry_level.applied == False %}
            QUAD_GANTRY_LEVEL
            G28 Z
        {% endif %}
    {% endif %}
    
    ## Move toolhead to location with Absolute move
    G90
    G1 Y{POSITION} F{XY_FEEDRATE}
    
    ## Restore gcode state (Positioning Mode g90/g91, extrude mode M82/M83, etc)
	RESTORE_GCODE_STATE NAME=CURR_STATE

[gcode_macro Z_Move]
description: Moves Z to the desired location, either exact coordinate or % of maximum move distance. Primarily used in Mainsail to add a "Move to Z position" button, which is available only on Fluidd. More info at: https://github.com/ewarroof/Klipper-Config
gcode:
    ##*~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ##* Macro Parameters/Variables
    ##*~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ## Parameters
    {% set POSITION = params.POSITION|default('50')|string %}                         ; default position for move. Stored as a string, which will be cast back to int/float later
    
    ## Static Variables (Change for your requirements)
    {% set XY_FEEDRATE = 6000 %}                                                    ; Feedrate for X and Y movements
    {% set Z_FEEDRATE = 1500 %}                                                     ; Feedrate for Z movements
    
    ## Dynamic Variables
    {% set ABSOLUTE = printer.gcode_move.absolute_coordinates %}                    ; Absolute Movement mode
    
    ##*~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ##* Macro Body
    ##*~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ## Convert Parameter values to raw integer or % of maximum move range
    ## EXPLANATION: If Percentage is provided, it will remove the % sign, check if its a valid Integer and then obtain % of maximum move length.
    ##              Else If Int is provided, it will confirm it's a valid int and then use that value
    ##              Else no move for that Axis
    {% if POSITION.endswith('%') %}
      {% set POSITION = POSITION|replace("%","") %}
      {% if POSITION|int(-1) == -1 %}
        {action_raise_error("Z is malformed")}
      {% elif POSITION|int > 100 %}
        {action_raise_error("Z is over 100%")}
      {% else %}
        {% set POSITION = (printer.toolhead.axis_maximum.z|float / (100 / POSITION|int))|round %}
      {% endif %}
    {% elif POSITION|int(-1) != -1 %}
      {% set POSITION = POSITION|int %}
    {% else %}
      {% set POSITION = 'nomove'|string %}
    {% endif %}

    ## Throw if a Z does not have a valid value 
    {% if POSITION == 'nomove'|string  %}
      {action_raise_error("A valid Z value has not been provided")}
    {% endif %}
    
    ## Save gcode state (Positioning Mode g90/g91, extrude mode M82/M83, etc)
	SAVE_GCODE_STATE NAME=CURR_STATE

    ## Pre-move and homing commands (Add any pre-move commands here if needed, e.g. QGL, lift Z)
    CG28 ; Conditional G28 Macro
    
    # QGL if not already QGLd (only if QGL section exists in config)
    {% if printer.configfile.settings.quad_gantry_level %}
        {% if printer.quad_gantry_level.applied == False %}
            QUAD_GANTRY_LEVEL
            G28 Z
        {% endif %}
    {% endif %}
    
    ## Move toolhead to location with Absolute move
    G90
    G1 Z{POSITION} F{Z_FEEDRATE}
    
    ## Restore gcode state (Positioning Mode g90/g91, extrude mode M82/M83, etc)
	RESTORE_GCODE_STATE NAME=CURR_STATE

[gcode_macro XYZ_Move]
description: Moves X, Y and Z to the desired location, either exact coordinate or % of maximum move distance. Primarily used in Mainsail to add a "Move to XYZ position" button, which is available only on Fluidd. More info at: https://github.com/ewarroof/Klipper-Config
gcode:
    ##*~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ##* Macro Parameters/Variables
    ##*~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ## Parameters
    {% set X_POSITION = params.X|default(none)|string %}                           ; default position for move. Stored as a string, which will be cast back to int/float later
    {% set Y_POSITION = params.Y|default(none)|string %}                           ; default position for move. Stored as a string, which will be cast back to int/float later
    {% set Z_POSITION = params.Z|default(none)|string %}                             ; default position for move. Stored as a string, which will be cast back to int/float later
    
    ## Static Variables (Change for your requirements)
    {% set XY_FEEDRATE = 6000 %}                                                    ; Feedrate for X and Y movements
    {% set Z_FEEDRATE = 1500 %}                                                     ; Feedrate for Z movements
    
    ## Dynamic Variables
    {% set ABSOLUTE = printer.gcode_move.absolute_coordinates %}                    ; Absolute Movement mode
    
    ##*~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ##* Macro Body
    ##*~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ## Convert Parameter values to raw integer or % of maximum move range
    ## EXPLANATION: If Percentage is provided, it will remove the % sign, check if its a valid Integer and then obtain % of maximum move length.
    ##              Else If Int is provided, it will confirm it's a valid int and then use that value
    ##              Else no move for that Axis

    # Y 
    {% if Y_POSITION.endswith('%') %}
      {% set Y_POSITION = Y_POSITION|replace("%","") %}
      {% if Y_POSITION|int(-1) == -1 %}
        {action_raise_error("Y is malformed")}
      {% elif Y_POSITION|int > 100 %}
        {action_raise_error("Y is over 100%")}
      {% else %}
        {% set Y_POSITION = (printer.toolhead.axis_maximum.y|float / (100 / Y_POSITION|int))|round %}
      {% endif %}
    {% elif Y_POSITION|int(-1) != -1 %}
      {% set Y_POSITION = Y_POSITION|int %}
    {% else %}
      {% set Y_POSITION = 'nomove'|string %}
    {% endif %}

    # X
    {% if X_POSITION.endswith('%') %}
      {% set X_POSITION = X_POSITION|replace("%","") %}
      {% if X_POSITION|int(-1) == -1 %}
        {action_raise_error("X is malformed")}
      {% elif X_POSITION|int > 100 %}
        {action_raise_error("X is over 100%")}
      {% else %}
        {% set X_POSITION = (printer.toolhead.axis_maximum.x|float / (100 / X_POSITION|int))|round %}
      {% endif %}
    {% elif X_POSITION|int(-1) != -1 %}
      {% set X_POSITION = X_POSITION|int %}
    {% else %}
      {% set X_POSITION = 'nomove'|string %}
    {% endif %}

    # Z 
    {% if Z_POSITION.endswith('%') %}
      {% set Z_POSITION = Z_POSITION|replace("%","") %}
      {% if Z_POSITION|int(-1) == -1 %}
        {action_raise_error("Z is malformed")}
      {% elif Z_POSITION|int > 100 %}
        {action_raise_error("Z is over 100%")}
      {% else %}
        {% set Z_POSITION = (printer.toolhead.axis_maximum.z|float / (100 / Z_POSITION|int))|round %}
      {% endif %}
    {% elif Z_POSITION|int(-1) != -1 %}
      {% set Z_POSITION = Z_POSITION|int %}
    {% else %}
      {% set Z_POSITION = 'nomove'|string %}
    {% endif %}

    ## Throw if a neither X, Y or Z have a valid value 
    {% if X_POSITION == 'nomove'|string and Y_POSITION == 'nomove'|string and Z_POSITION == 'nomove'|string %}
      {action_raise_error("A valid X, Y or Z value has not been provided")}
    {% endif %}
    
    ## Save gcode state (Positioning Mode g90/g91, extrude mode M82/M83, etc)
	SAVE_GCODE_STATE NAME=CURR_STATE

    ## Pre-move and homing commands (Add any pre-move commands here if needed, e.g. QGL, lift Z)
    CG28 ; Conditional G28 Macro
    
    # QGL if not already QGLd (only if QGL section exists in config)
    {% if printer.configfile.settings.quad_gantry_level %}
        {% if printer.quad_gantry_level.applied == False %}
            QUAD_GANTRY_LEVEL
            G28 Z
        {% endif %}
    {% endif %}
    
    ## Set to Absolute Positioning
    G90

    ## Move either both X and Y, just X or just Y
    {% if X_POSITION != 'nomove'|string and Y_POSITION != 'nomove'|string %}
      G1 X{X_POSITION} Y{Y_POSITION} F{XY_FEEDRATE}
    {% elif X_POSITION != 'nomove'|string %}
      G1 X{X_POSITION} F{XY_FEEDRATE}
    {% elif Y_POSITION != 'nomove'|string %}
      G1 Y{Y_POSITION} F{XY_FEEDRATE}
    {% endif %}

    ## Move Z
    {% if Z_POSITION != 'nomove'|string %}
      G1 Z{Z_POSITION} F{Z_FEEDRATE}
    {% endif %}

    ## Restore gcode state (Positioning Mode g90/g91, extrude mode M82/M83, etc)
	RESTORE_GCODE_STATE NAME=CURR_STATE
